[project]
name = "filename-manager"
version = "0.1.0"
requires-python = ">= 3.9"
authors = [{name = "Alex C Warren", email = "alexcwarren.info@gmail.com"}]
description = "Edit a batch of given filenames following user-defined rules."
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["filenames", "batch rename", "cli", "utilities", "files"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Topic :: Utilities",
]

[project.urls]
"Homepage" = "https://github.com/alexcwarren/filename-manager"
"Repository" = "https://github.com/alexwarren/filename-manager"
"Issues" = "https://github.com/alexcwarren/filename-manager/issues"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "coverage[toml]",
    "ruff",
    "pre-commit",
    "mypy",
]

[project.scripts]
filename-manager = "filename_manager.filename_manager:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
# Define the dependencies for your default development environment here.
# This replaces the need for a separate `install-dev` script,
# as 'hatch run' will ensure these are installed in its managed environment.
dependencies = [
    "pytest",
    "pytest-cov",
    "coverage[toml]",
    "ruff",
    "pre-commit",
    "mypy",
]

[tool.hatch.envs.default.scripts]
clean = "python scripts/clean.py"
format = "ruff format ."
lint = "ruff check . --fix"
typecheck = "mypy src tests scripts"
test = "pytest --cov-report=xml"
build = "python -m build"
ci = "hatch run format && hatch run lint && hatch run typecheck && hatch run test"
help = """
        echo "Available commands (run with 'hatch run <command>'):"
        echo "  clean       - Clean up build artifacts and cache files."
        echo "  format      - Format code with ruff-format."
        echo "  lint        - Lint code with ruff check."
        echo "  typecheck   - Run mypy type checker."
        echo "  test        - Run pytest tests and generate coverage."
        echo "  build       - Build distribution packages."
        echo "  ci          - Run format, lint, typecheck, and test (like CI)."
        echo "  help        - Display this help message."
    """

[tool.pytest.ini_options]
pythonpath = ["src"]
addopts = "-v -m 'not full' --cov=src/filename_manager --cov-report=term-missing"
markers = [
    "full: marks test to only run during 'full' testing"
]

[tool.coverage.run]
branch = true
source = ["src/filename_manager"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
# Ruff uses an exclusive limit (warns at 88+)
line-length = 88
indent-width = 4
# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
    "E4", "E7", "E9", "F",  # pycodestyle errors + pyflakes
    "I",                    # isort
    "UP",                   # pyupgrade: modern Python syntax
    "B",                    # flake8-bugbear: common bug risks
    "C4",                   # flake8-comprehensions
]
ignore = []
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
# Section for import categories
known-first-party = ["filename_manager"]
known-third-party = ["pytest"]
#Ensure that imports are grouped by type
force-sort-within-sections = true
combine-as-imports = true

[tool.mypy]
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
files = ["src", "tests", "scripts"]
# # Tells mypy to only check the package "filename_manager".
packages = ["filename_manager"]
mypy_path = "src"

[[tool.mypy.overrides]]
module = "filename_manager.*"
ignore_missing_imports = false
